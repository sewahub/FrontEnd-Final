{"ast":null,"code":"// import React, { useState } from 'react';\n// import clsx from 'clsx';\n// import PropTypes from 'prop-types';\n// import PerfectScrollbar from 'react-perfect-scrollbar';\n// import {\n//   Avatar,\n//   Box,\n//   Card,\n//   Checkbox,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TablePagination,\n//   TableRow,\n//   Typography,\n//   makeStyles\n// } from '@material-ui/core';\n// import getInitials from 'src/utils/getInitials';\n// const useStyles = makeStyles((theme) => ({\n//   root: {},\n//   avatar: {\n//     marginRight: theme.spacing(2)\n//   }\n// }));\n// const Results = ({ className, modules, ...rest }) => {\n//   const classes = useStyles();\n//   const [selectedModuleIds, setSelectedModuleIds] = useState([]);\n//   const [limit, setLimit] = useState(10);\n//   const [page, setPage] = useState(0);\n//   const handleSelectAll = (event) => {\n//     let newSelectedModuleIds;\n//     if (event.target.checked) {\n//       newSelectedModuleIds = modules.map((module) => module.id);\n//     } else {\n//       newSelectedModuleIds = [];\n//     }\n//     setSelectedModuleIds(newSelectedModuleIds);\n//   };\n//   const handleSelectOne = (event, id) => {\n//     const selectedIndex = selectedModuleIds.indexOf(id);\n//     let newSelectedModuleIds = [];\n//     if (selectedIndex === -1) {\n//       newSelectedModuleIds = newSelectedModuleIds.concat(selectedModuleIds, id);\n//     } else if (selectedIndex === 0) {\n//       newSelectedModuleIds = newSelectedModuleIds.concat(selectedModuleIds.slice(1));\n//     } else if (selectedIndex === selectedModuleIds.length - 1) {\n//       newSelectedModuleIds = newSelectedModuleIds.concat(selectedModuleIds.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelectedModuleIds = newSelectedModuleIds.concat(\n//         selectedModuleIds.slice(0, selectedIndex),\n//         selectedModuleIds.slice(selectedIndex + 1)\n//       );\n//     }\n//     setSelectedModuleIds(newSelectedModuleIds);\n//   };\n//   const handleLimitChange = (event) => {\n//     setLimit(event.target.value);\n//   };\n//   const handlePageChange = (event, newPage) => {\n//     setPage(newPage);\n//   };\n//   return (\n//     <Card\n//       className={clsx(classes.root, className)}\n//       {...rest}\n//     >\n//       <PerfectScrollbar>\n//         <Box minWidth={1050}>\n//           <Table>\n//             <TableHead>\n//               <TableRow>\n//                 <TableCell padding=\"checkbox\">\n//                   <Checkbox\n//                     checked={selectedModuleIds.length === modules.length}\n//                     color=\"primary\"\n//                     indeterminate={\n//                       selectedModuleIds.length > 0\n//                       && selectedModuleIds.length < modules.length\n//                     }\n//                     onChange={handleSelectAll}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   Name\n//                 </TableCell>\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {modules.slice(0, limit).map((module) => (\n//                 <TableRow\n//                   hover\n//                   key={module.id}\n//                   selected={selectedModuleIds.indexOf(module.id) !== -1}\n//                 >\n//                   <TableCell padding=\"checkbox\">\n//                     <Checkbox\n//                       checked={selectedModuleIds.indexOf(module.id) !== -1}\n//                       onChange={(event) => handleSelectOne(event, module.id)}\n//                       value=\"true\"\n//                     />\n//                   </TableCell>\n//                   <TableCell>\n//                     <Box\n//                       alignItems=\"center\"\n//                       display=\"flex\"\n//                     >\n//                       <Avatar\n//                         className={classes.avatar}\n//                         src={module.avatarUrl}\n//                       >\n//                         {getInitials(module.name)}\n//                       </Avatar>\n//                       <Typography\n//                         color=\"textPrimary\"\n//                         variant=\"body1\"\n//                       >\n//                         {module.name}\n//                       </Typography>\n//                     </Box>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//         </Box>\n//       </PerfectScrollbar>\n//       <TablePagination\n//         component=\"div\"\n//         count={modules.length}\n//         onChangePage={handlePageChange}\n//         onChangeRowsPerPage={handleLimitChange}\n//         page={page}\n//         rowsPerPage={limit}\n//         rowsPerPageOptions={[5, 10, 25]}\n//       />\n//     </Card>\n//   );\n// };\n// Results.propTypes = {\n//   className: PropTypes.string,\n//   modules: PropTypes.array.isRequired\n// };\n// export default Results;","map":{"version":3,"sources":["C:/Users/Dev/Downloads/working/material-kit-react-main/src/views/org/ModuleListView/Results.js"],"names":[],"mappingssourcesContent":["// import React, { useState } from 'react';\n// import clsx from 'clsx';\n// import PropTypes from 'prop-types';\n// import PerfectScrollbar from 'react-perfect-scrollbar';\n// import {\n//   Avatar,\n//   Box,\n//   Card,\n//   Checkbox,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TablePagination,\n//   TableRow,\n//   Typography,\n//   makeStyles\n// } from '@material-ui/core';\n// import getInitials from 'src/utils/getInitials';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {},\n//   avatar: {\n//     marginRight: theme.spacing(2)\n//   }\n// }));\n\n// const Results = ({ className, modules, ...rest }) => {\n//   const classes = useStyles();\n//   const [selectedModuleIds, setSelectedModuleIds] = useState([]);\n//   const [limit, setLimit] = useState(10);\n//   const [page, setPage] = useState(0);\n\n//   const handleSelectAll = (event) => {\n//     let newSelectedModuleIds;\n\n//     if (event.target.checked) {\n//       newSelectedModuleIds = modules.map((module) => module.id);\n//     } else {\n//       newSelectedModuleIds = [];\n//     }\n\n//     setSelectedModuleIds(newSelectedModuleIds);\n//   };\n\n//   const handleSelectOne = (event, id) => {\n//     const selectedIndex = selectedModuleIds.indexOf(id);\n//     let newSelectedModuleIds = [];\n\n//     if (selectedIndex === -1) {\n//       newSelectedModuleIds = newSelectedModuleIds.concat(selectedModuleIds, id);\n//     } else if (selectedIndex === 0) {\n//       newSelectedModuleIds = newSelectedModuleIds.concat(selectedModuleIds.slice(1));\n//     } else if (selectedIndex === selectedModuleIds.length - 1) {\n//       newSelectedModuleIds = newSelectedModuleIds.concat(selectedModuleIds.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelectedModuleIds = newSelectedModuleIds.concat(\n//         selectedModuleIds.slice(0, selectedIndex),\n//         selectedModuleIds.slice(selectedIndex + 1)\n//       );\n//     }\n\n//     setSelectedModuleIds(newSelectedModuleIds);\n//   };\n\n//   const handleLimitChange = (event) => {\n//     setLimit(event.target.value);\n//   };\n\n//   const handlePageChange = (event, newPage) => {\n//     setPage(newPage);\n//   };\n\n//   return (\n//     <Card\n//       className={clsx(classes.root, className)}\n//       {...rest}\n//     >\n//       <PerfectScrollbar>\n//         <Box minWidth={1050}>\n//           <Table>\n//             <TableHead>\n//               <TableRow>\n//                 <TableCell padding=\"checkbox\">\n//                   <Checkbox\n//                     checked={selectedModuleIds.length === modules.length}\n//                     color=\"primary\"\n//                     indeterminate={\n//                       selectedModuleIds.length > 0\n//                       && selectedModuleIds.length < modules.length\n//                     }\n//                     onChange={handleSelectAll}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   Name\n//                 </TableCell>\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {modules.slice(0, limit).map((module) => (\n//                 <TableRow\n//                   hover\n//                   key={module.id}\n//                   selected={selectedModuleIds.indexOf(module.id) !== -1}\n//                 >\n//                   <TableCell padding=\"checkbox\">\n//                     <Checkbox\n//                       checked={selectedModuleIds.indexOf(module.id) !== -1}\n//                       onChange={(event) => handleSelectOne(event, module.id)}\n//                       value=\"true\"\n//                     />\n//                   </TableCell>\n//                   <TableCell>\n//                     <Box\n//                       alignItems=\"center\"\n//                       display=\"flex\"\n//                     >\n//                       <Avatar\n//                         className={classes.avatar}\n//                         src={module.avatarUrl}\n//                       >\n//                         {getInitials(module.name)}\n//                       </Avatar>\n//                       <Typography\n//                         color=\"textPrimary\"\n//                         variant=\"body1\"\n//                       >\n//                         {module.name}\n//                       </Typography>\n//                     </Box>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//         </Box>\n//       </PerfectScrollbar>\n//       <TablePagination\n//         component=\"div\"\n//         count={modules.length}\n//         onChangePage={handlePageChange}\n//         onChangeRowsPerPage={handleLimitChange}\n//         page={page}\n//         rowsPerPage={limit}\n//         rowsPerPageOptions={[5, 10, 25]}\n//       />\n//     </Card>\n//   );\n// };\n\n// Results.propTypes = {\n//   className: PropTypes.string,\n//   modules: PropTypes.array.isRequired\n// };\n\n// export default Results;\n"]},"metadata":{},"sourceType":"module"}