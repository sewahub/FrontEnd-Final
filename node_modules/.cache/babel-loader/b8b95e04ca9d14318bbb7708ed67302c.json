{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SumeshPokhrel\\\\Downloads\\\\FrontEnd-Final-master\\\\src\\\\views\\\\customer\\\\CustomerListView\\\\Results.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Avatar, Box, Card, Checkbox, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography, makeStyles } from '@material-ui/core';\nimport getInitials from 'src/utils/getInitials';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst Results = ({\n  className,\n  customers,\n  ...rest\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectAll = event => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = customers.map(customer => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, selectedIndex), selectedCustomerIds.slice(selectedIndex + 1));\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = event => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: clsx(classes.root, className),\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        minWidth: 1050,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectedCustomerIds.length === customers.length,\n                  color: \"primary\",\n                  indeterminate: selectedCustomerIds.length > 0 && selectedCustomerIds.length < customers.length,\n                  onChange: handleSelectAll\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Phone\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Registration date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: customers.slice(0, limit).map(customer => /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              selected: selectedCustomerIds.indexOf(customer.id) !== -1,\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectedCustomerIds.indexOf(customer.id) !== -1,\n                  onChange: event => handleSelectOne(event, customer.id),\n                  value: \"true\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  alignItems: \"center\",\n                  display: \"flex\",\n                  children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                    className: classes.avatar,\n                    src: customer.avatarUrl,\n                    children: getInitials(customer.name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    color: \"textPrimary\",\n                    variant: \"body1\",\n                    children: customer.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: customer.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: `${customer.address.city}, ${customer.address.state}, ${customer.address.country}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: customer.phone\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: moment(customer.createdAt).format('DD/MM/YYYY')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this)]\n            }, customer.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      component: \"div\",\n      count: customers.length,\n      onChangePage: handlePageChange,\n      onChangeRowsPerPage: handleLimitChange,\n      page: page,\n      rowsPerPage: limit,\n      rowsPerPageOptions: [5, 10, 25]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Results, \"TJBnraLDnOIKSDTBUfOpU6qU9rI=\", false, function () {\n  return [useStyles];\n});\n\n_c = Results;\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array.isRequired\n};\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["C:/Users/SumeshPokhrel/Downloads/FrontEnd-Final-master/src/views/customer/CustomerListView/Results.js"],"names":["React","useState","clsx","PropTypes","moment","PerfectScrollbar","Avatar","Box","Card","Checkbox","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","makeStyles","getInitials","useStyles","theme","root","avatar","marginRight","spacing","Results","className","customers","rest","classes","selectedCustomerIds","setSelectedCustomerIds","limit","setLimit","page","setPage","handleSelectAll","event","newSelectedCustomerIds","target","checked","map","customer","id","handleSelectOne","selectedIndex","indexOf","concat","slice","length","handleLimitChange","value","handlePageChange","newPage","avatarUrl","name","email","address","city","state","country","phone","createdAt","format","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Card,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport getInitials from 'src/utils/getInitials';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst Results = ({ className, customers, ...rest }) => {\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectAll = (event) => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = customers.map((customer) => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        selectedCustomerIds.slice(0, selectedIndex),\n        selectedCustomerIds.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <PerfectScrollbar>\n        <Box minWidth={1050}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedCustomerIds.length === customers.length}\n                    color=\"primary\"\n                    indeterminate={\n                      selectedCustomerIds.length > 0\n                      && selectedCustomerIds.length < customers.length\n                    }\n                    onChange={handleSelectAll}\n                  />\n                </TableCell>\n                <TableCell>\n                  Name\n                </TableCell>\n                <TableCell>\n                  Email\n                </TableCell>\n                <TableCell>\n                  Location\n                </TableCell>\n                <TableCell>\n                  Phone\n                </TableCell>\n                <TableCell>\n                  Registration date\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {customers.slice(0, limit).map((customer) => (\n                <TableRow\n                  hover\n                  key={customer.id}\n                  selected={selectedCustomerIds.indexOf(customer.id) !== -1}\n                >\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      checked={selectedCustomerIds.indexOf(customer.id) !== -1}\n                      onChange={(event) => handleSelectOne(event, customer.id)}\n                      value=\"true\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Box\n                      alignItems=\"center\"\n                      display=\"flex\"\n                    >\n                      <Avatar\n                        className={classes.avatar}\n                        src={customer.avatarUrl}\n                      >\n                        {getInitials(customer.name)}\n                      </Avatar>\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"body1\"\n                      >\n                        {customer.name}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    {customer.email}\n                  </TableCell>\n                  <TableCell>\n                    {`${customer.address.city}, ${customer.address.state}, ${customer.address.country}`}\n                  </TableCell>\n                  <TableCell>\n                    {customer.phone}\n                  </TableCell>\n                  <TableCell>\n                    {moment(customer.createdAt).format('DD/MM/YYYY')}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={customers.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array.isRequired\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}